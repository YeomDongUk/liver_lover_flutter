// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../data/models/medication_information/medication_information_model.dart';
import '../../data/models/medication_schedule/medication_schedule_model.dart';
import '../../data/models/notification/schedule_notificaiton_model.dart';
import '../../data/models/prescription/prescription_model.dart';
import '../../data/models/user/last_login_user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7505543980736240774),
      name: 'PrescriptionModel',
      lastPropertyId: const IdUid(12, 572233348064027076),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7994052172909805715),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1452360752079841376),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 601624993207241066),
            name: 'prescriptedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7361722382973633500),
            name: 'medicationStartAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6819736557057874567),
            name: 'medicationEndAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4545624319696244572),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3212845462374864083),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5112766241829822797),
            name: 'duration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 572233348064027076),
            name: 'doctorName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 166508030542451951),
      name: 'MedicationInformationModel',
      lastPropertyId: const IdUid(15, 6994921481914684156),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3072331895372146099),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 6040049296684072752),
            name: 'pillId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7435857567563531871),
            name: 'takeCount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8913768806726318519),
            name: 'morningHour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3440540143290646647),
            name: 'afternoonHour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3821730260406955694),
            name: 'eveningHour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7146074883840501106),
            name: 'nightHour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4287381652167482205),
            name: 'medicationCycle',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2608110125677194764),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5874878325919974099),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2875265441880584293),
            name: 'prescriptionId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6284198819983732310),
            name: 'beforePush',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7558716133193697197),
            name: 'afterPush',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6994921481914684156),
            name: 'push',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5024715853020497297),
      name: 'MedicationScheduleModel',
      lastPropertyId: const IdUid(11, 7525949761246525804),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3298401394674231915),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4911526024246630581),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 487139324825518452),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2964139929189410481),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1727991277604786685),
            name: 'reservedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3815710290556828592),
            name: 'medicatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2964298860840737351),
            name: 'medicationInformationId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2801480174881122336),
            name: 'beforePush',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2222743451626604193),
            name: 'afterPush',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5028407109905739964),
            name: 'push',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7525949761246525804),
            name: 'prescriptionId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 4456680879342113576),
      name: 'LastLoginUserModel',
      lastPropertyId: const IdUid(3, 7763630326462159354),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1872957529316517061),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8192288717529201222),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7763630326462159354),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 3308473046827235202),
      name: 'ScheduleNotificationModel',
      lastPropertyId: const IdUid(9, 4298543476012545447),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7759362279696631975),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9131087734847805654),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3746741715091559902),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8549489565548601443),
            name: 'reservedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7903081844059420335),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4307643050105318405),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 197818766841442401),
            name: 'beforePush',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4298543476012545447),
            name: 'scheduleIds',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 3308473046827235202),
      lastIndexId: const IdUid(1, 2107920619168429642),
      lastRelationId: const IdUid(1, 7667739622610143284),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        4382344440240493885,
        4055928207512668860,
        3012450906664567534
      ],
      retiredIndexUids: const [2107920619168429642],
      retiredPropertyUids: const [
        4662422625443323279,
        1901899781615006652,
        4030950906145555806,
        7490709070535494247,
        5691266155421452940,
        551788663016471759,
        2057608646675482245,
        4988310767800598919,
        5213123627273235250,
        551649499572803090,
        658031957147790166,
        7006901712647995414,
        8967566884151501019,
        2828501766178083446,
        1749117216712901958,
        3001923148465055748,
        1455190540179756968,
        6820613557673412576,
        7675331291500448797,
        7481250081687883018,
        528795987756704640,
        6032126629213508528
      ],
      retiredRelationUids: const [7667739622610143284],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PrescriptionModel: EntityDefinition<PrescriptionModel>(
        model: _entities[0],
        toOneRelations: (PrescriptionModel object) => [],
        toManyRelations: (PrescriptionModel object) => {},
        getId: (PrescriptionModel object) => object.id,
        setId: (PrescriptionModel object, int id) {
          object.id = id;
        },
        objectToFB: (PrescriptionModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final doctorNameOffset = fbb.writeString(object.doctorName);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(2, object.prescriptedAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.medicationStartAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.medicationEndAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.duration);
          fbb.addOffset(11, doctorNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PrescriptionModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              prescriptedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              doctorName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''),
              medicationStartAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              medicationEndAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              duration:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              createdAt:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));

          return object;
        }),
    MedicationInformationModel: EntityDefinition<MedicationInformationModel>(
        model: _entities[1],
        toOneRelations: (MedicationInformationModel object) => [],
        toManyRelations: (MedicationInformationModel object) => {},
        getId: (MedicationInformationModel object) => object.id,
        setId: (MedicationInformationModel object, int id) {
          object.id = id;
        },
        objectToFB: (MedicationInformationModel object, fb.Builder fbb) {
          final pillIdOffset = fbb.writeString(object.pillId);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, pillIdOffset);
          fbb.addFloat64(3, object.takeCount);
          fbb.addInt64(4, object.morningHour);
          fbb.addInt64(5, object.afternoonHour);
          fbb.addInt64(6, object.eveningHour);
          fbb.addInt64(7, object.nightHour);
          fbb.addInt64(8, object.medicationCycle);
          fbb.addInt64(9, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(11, object.prescriptionId);
          fbb.addBool(12, object.beforePush);
          fbb.addBool(13, object.afterPush);
          fbb.addBool(14, object.push);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MedicationInformationModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              prescriptionId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
              pillId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              takeCount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              morningHour: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              afternoonHour: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              eveningHour: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              nightHour: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              medicationCycle:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              beforePush: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 28, false),
              afterPush: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 30, false),
              push: const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false),
              createdAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)));

          return object;
        }),
    MedicationScheduleModel: EntityDefinition<MedicationScheduleModel>(
        model: _entities[2],
        toOneRelations: (MedicationScheduleModel object) => [],
        toManyRelations: (MedicationScheduleModel object) => {},
        getId: (MedicationScheduleModel object) => object.id,
        setId: (MedicationScheduleModel object, int id) {
          object.id = id;
        },
        objectToFB: (MedicationScheduleModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.reservedAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.medicatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.medicationInformationId);
          fbb.addBool(7, object.beforePush);
          fbb.addBool(8, object.afterPush);
          fbb.addBool(9, object.push);
          fbb.addInt64(10, object.prescriptionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final medicatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = MedicationScheduleModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              prescriptionId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              medicationInformationId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              reservedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              beforePush: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              afterPush: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              push: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false),
              medicatedAt: medicatedAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(medicatedAtValue),
              createdAt:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    LastLoginUserModel: EntityDefinition<LastLoginUserModel>(
        model: _entities[3],
        toOneRelations: (LastLoginUserModel object) => [],
        toManyRelations: (LastLoginUserModel object) => {},
        getId: (LastLoginUserModel object) => object.id,
        setId: (LastLoginUserModel object, int id) {
          object.id = id;
        },
        objectToFB: (LastLoginUserModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LastLoginUserModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));

          return object;
        }),
    ScheduleNotificationModel: EntityDefinition<ScheduleNotificationModel>(
        model: _entities[4],
        toOneRelations: (ScheduleNotificationModel object) => [],
        toManyRelations: (ScheduleNotificationModel object) => {},
        getId: (ScheduleNotificationModel object) => object.id,
        setId: (ScheduleNotificationModel object, int id) {
          object.id = id;
        },
        objectToFB: (ScheduleNotificationModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final scheduleIdsOffset = fbb.writeList(
              object.scheduleIds.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(2, object.type);
          fbb.addInt64(4, object.reservedAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(7, object.beforePush);
          fbb.addOffset(8, scheduleIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScheduleNotificationModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              type: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              scheduleIds: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 20, []),
              beforePush: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              reservedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              updatedAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PrescriptionModel] entity fields to define ObjectBox queries.
class PrescriptionModel_ {
  /// see [PrescriptionModel.id]
  static final id =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[0]);

  /// see [PrescriptionModel.userId]
  static final userId =
      QueryStringProperty<PrescriptionModel>(_entities[0].properties[1]);

  /// see [PrescriptionModel.prescriptedAt]
  static final prescriptedAt =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[2]);

  /// see [PrescriptionModel.medicationStartAt]
  static final medicationStartAt =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[3]);

  /// see [PrescriptionModel.medicationEndAt]
  static final medicationEndAt =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[4]);

  /// see [PrescriptionModel.createdAt]
  static final createdAt =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[5]);

  /// see [PrescriptionModel.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[6]);

  /// see [PrescriptionModel.duration]
  static final duration =
      QueryIntegerProperty<PrescriptionModel>(_entities[0].properties[7]);

  /// see [PrescriptionModel.doctorName]
  static final doctorName =
      QueryStringProperty<PrescriptionModel>(_entities[0].properties[8]);
}

/// [MedicationInformationModel] entity fields to define ObjectBox queries.
class MedicationInformationModel_ {
  /// see [MedicationInformationModel.id]
  static final id = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[0]);

  /// see [MedicationInformationModel.pillId]
  static final pillId = QueryStringProperty<MedicationInformationModel>(
      _entities[1].properties[1]);

  /// see [MedicationInformationModel.takeCount]
  static final takeCount = QueryDoubleProperty<MedicationInformationModel>(
      _entities[1].properties[2]);

  /// see [MedicationInformationModel.morningHour]
  static final morningHour = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[3]);

  /// see [MedicationInformationModel.afternoonHour]
  static final afternoonHour = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[4]);

  /// see [MedicationInformationModel.eveningHour]
  static final eveningHour = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[5]);

  /// see [MedicationInformationModel.nightHour]
  static final nightHour = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[6]);

  /// see [MedicationInformationModel.medicationCycle]
  static final medicationCycle =
      QueryIntegerProperty<MedicationInformationModel>(
          _entities[1].properties[7]);

  /// see [MedicationInformationModel.createdAt]
  static final createdAt = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[8]);

  /// see [MedicationInformationModel.updatedAt]
  static final updatedAt = QueryIntegerProperty<MedicationInformationModel>(
      _entities[1].properties[9]);

  /// see [MedicationInformationModel.prescriptionId]
  static final prescriptionId =
      QueryIntegerProperty<MedicationInformationModel>(
          _entities[1].properties[10]);

  /// see [MedicationInformationModel.beforePush]
  static final beforePush = QueryBooleanProperty<MedicationInformationModel>(
      _entities[1].properties[11]);

  /// see [MedicationInformationModel.afterPush]
  static final afterPush = QueryBooleanProperty<MedicationInformationModel>(
      _entities[1].properties[12]);

  /// see [MedicationInformationModel.push]
  static final push = QueryBooleanProperty<MedicationInformationModel>(
      _entities[1].properties[13]);
}

/// [MedicationScheduleModel] entity fields to define ObjectBox queries.
class MedicationScheduleModel_ {
  /// see [MedicationScheduleModel.id]
  static final id =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[0]);

  /// see [MedicationScheduleModel.userId]
  static final userId =
      QueryStringProperty<MedicationScheduleModel>(_entities[2].properties[1]);

  /// see [MedicationScheduleModel.createdAt]
  static final createdAt =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[2]);

  /// see [MedicationScheduleModel.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[3]);

  /// see [MedicationScheduleModel.reservedAt]
  static final reservedAt =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[4]);

  /// see [MedicationScheduleModel.medicatedAt]
  static final medicatedAt =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[5]);

  /// see [MedicationScheduleModel.medicationInformationId]
  static final medicationInformationId =
      QueryIntegerProperty<MedicationScheduleModel>(_entities[2].properties[6]);

  /// see [MedicationScheduleModel.beforePush]
  static final beforePush =
      QueryBooleanProperty<MedicationScheduleModel>(_entities[2].properties[7]);

  /// see [MedicationScheduleModel.afterPush]
  static final afterPush =
      QueryBooleanProperty<MedicationScheduleModel>(_entities[2].properties[8]);

  /// see [MedicationScheduleModel.push]
  static final push =
      QueryBooleanProperty<MedicationScheduleModel>(_entities[2].properties[9]);

  /// see [MedicationScheduleModel.prescriptionId]
  static final prescriptionId = QueryIntegerProperty<MedicationScheduleModel>(
      _entities[2].properties[10]);
}

/// [LastLoginUserModel] entity fields to define ObjectBox queries.
class LastLoginUserModel_ {
  /// see [LastLoginUserModel.id]
  static final id =
      QueryIntegerProperty<LastLoginUserModel>(_entities[3].properties[0]);

  /// see [LastLoginUserModel.userId]
  static final userId =
      QueryStringProperty<LastLoginUserModel>(_entities[3].properties[1]);

  /// see [LastLoginUserModel.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<LastLoginUserModel>(_entities[3].properties[2]);
}

/// [ScheduleNotificationModel] entity fields to define ObjectBox queries.
class ScheduleNotificationModel_ {
  /// see [ScheduleNotificationModel.id]
  static final id = QueryIntegerProperty<ScheduleNotificationModel>(
      _entities[4].properties[0]);

  /// see [ScheduleNotificationModel.userId]
  static final userId = QueryStringProperty<ScheduleNotificationModel>(
      _entities[4].properties[1]);

  /// see [ScheduleNotificationModel.type]
  static final type = QueryIntegerProperty<ScheduleNotificationModel>(
      _entities[4].properties[2]);

  /// see [ScheduleNotificationModel.reservedAt]
  static final reservedAt = QueryIntegerProperty<ScheduleNotificationModel>(
      _entities[4].properties[3]);

  /// see [ScheduleNotificationModel.createdAt]
  static final createdAt = QueryIntegerProperty<ScheduleNotificationModel>(
      _entities[4].properties[4]);

  /// see [ScheduleNotificationModel.updatedAt]
  static final updatedAt = QueryIntegerProperty<ScheduleNotificationModel>(
      _entities[4].properties[5]);

  /// see [ScheduleNotificationModel.beforePush]
  static final beforePush = QueryBooleanProperty<ScheduleNotificationModel>(
      _entities[4].properties[6]);

  /// see [ScheduleNotificationModel.scheduleIds]
  static final scheduleIds =
      QueryStringVectorProperty<ScheduleNotificationModel>(
          _entities[4].properties[7]);
}
